# name: Deploy Frontend to Docker Hub and Server

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build-and-deploy-frontend:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     - name: Set up Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: 18

#     - name: Build frontend Docker image
#       run: |
#         docker build \
#           --build-arg REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }} \
#           -t emiruuzun/test-project-frontend:latest .

#     - name: Log in to Docker Hub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: Push frontend Docker image to Docker Hub
#       run: |
#         docker push emiruuzun/test-project-frontend:latest

#     - name: SSH into server and deploy
#       uses: appleboy/ssh-action@v0.1.7
#       with:
#         host: ${{ secrets.SERVER_HOST }}
#         username: ${{ secrets.SERVER_USER }}
#         key: ${{ secrets.SERVER_SSH_KEY }}
#         port: ${{ secrets.SERVER_PORT }}
#         script: |
#           cd /home/ubuntu/myTestProject
#           sudo docker compose down
#           sudo docker ps -a -q --filter "name=nginx" | grep . && sudo docker rm -f $(sudo docker ps -a -q --filter "name=nginx") || true
#           sudo docker ps -a -q --filter "name=frontend" | grep . && sudo docker rm -f $(sudo docker ps -a -q --filter "name=frontend") || true
#           sudo docker ps -a -q --filter "name=backend" | grep . && sudo docker rm -f $(sudo docker ps -a -q --filter "name=backend") || true
#           sudo docker ps -aq | grep . && sudo docker rm -f $(sudo docker ps -aq) || true
#           sudo docker images -q | grep . && sudo docker rmi $(sudo docker images -q) || true
#           sudo docker compose up -d --build


name: Deploy Frontend to Docker Hub and Server

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: emiruuzun/test-project-frontend:latest
        build-args: |
          REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # Önbellek optimizasyonu
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: SSH into server and deploy
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Proje dizinine git
          cd /home/ubuntu/myTestProject
          
          # Mevcut servisleri durdur
          sudo docker compose down
          
          # Kullanılmayan container'ları temizle
          sudo docker container prune -f
          
          # Kullanılmayan imajları temizle
          sudo docker image prune -af
          
          # En son imajları çek
          sudo docker pull emiruuzun/test-project-frontend:latest
          
          # Docker compose ile servisleri yeniden başlat
          sudo docker compose up -d --build
          
          # Hata kontrolü
          if [ $? -eq 0 ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            exit 1
          fi
          
          # Sistem durumunu kontrol et
          sudo docker ps
          sudo docker compose logs --tail=50